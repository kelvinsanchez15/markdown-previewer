{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","App","useState","placeholder","text","setText","className","id","onChange","e","target","value","dangerouslySetInnerHTML","__html","marked","gfm","breaks","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCCdS,SAASC,IAAO,IAAD,EACJC,mBAASC,GADL,mBACrBC,EADqB,KACfC,EADe,KAa5B,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,UACA,8BAAUC,GAAG,SAASC,SAfN,SAACC,GACrBJ,EAAQI,EAAEC,OAAOC,QAckCA,MAAOP,KAExD,yBAAKE,UAAU,aACb,wBAAIA,UAAU,SAAd,aACA,yBAAKC,GAAG,UAAUK,wBAVf,CAAEC,OAJSC,IAAOV,EAAM,CAC7BW,KAAK,EACLC,QAAQ,SAkBd,IAAMb,EAAW,+wCCzBjBc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a86ca12a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport marked from \"marked\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const [text, setText] = useState(placeholder);\r\n  const changeHandler = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const getMarkedDownText = () => {\r\n    const rawMarkup = marked(text, {\r\n      gfm: true,\r\n      breaks: true,\r\n    });\r\n    return { __html: rawMarkup };\r\n  };\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Editor</h1>\r\n        <textarea id=\"editor\" onChange={changeHandler} value={text}></textarea>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Previewer</h1>\r\n        <div id=\"preview\" dangerouslySetInnerHTML={getMarkedDownText()} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst placeholder = `# React Markdown Previewer\r\n\r\n## What is Markdown?\r\nMarkdown is a lightweight markup language with plain-text-formatting syntax, is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. Read more on [Wikipedia](https://en.wikipedia.org/wiki/Markdown).\r\n\r\n## What can you do with Markdown?\r\n\r\n### Emphasis:\r\nYou can add emphasis by making text **bold**, _italic_ or ***combine both***.\r\n\r\n### Blockquotes: \r\nTo create a blockquote, add a > in front of a paragraph.\r\n> \"A person who never made a mistake never tried anything new.\"\r\n\r\n### List:\r\nYou can organize items into ordered and unordered lists.\r\n1. First item\r\n2. Second item\r\n3. Third item\r\n* First item\r\n* Second item\r\n* Third item\r\n\r\n### Code Blocks:\r\nWrap single line code between 2 backticks to display some code: \\`<div></div>\\`\r\n\\`\\`\\`\r\n// This way you can get multi-line code:\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n### Links:\r\nTo create a link, enclose the link text in brackets and then follow it immediately with the URL in parentheses.\r\n[FreeCodeCamp](https://www.freecodecamp.org/).\r\n\r\n### Images:\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}